FORMULA IDEAS:

NORMAL:   10 ^ ((x + 1)(x ^ 2 + 2x + 6000) / 6000)
  > Simplified to 10 ^ (1 + x + x ^ 2 / 2000 + x ^ 3 / 6000)
INVERSE:  log10(cubeInv(x, 1 / 6000, 1 / 2000, 1, 1))

/**
 * This solves the product
 * Product of n=0 to x of a+bn
 * inverse is with respect to x
 * @param {Decimal} x 
 * @param {Decimal} a 
 * @param {Decimal} b 
 */
function linearIncreaseMulti(x, inv, a, b) {
    x = new Decimal(x);
    a = new Decimal(a);
    b = new Decimal(b);

    return inv 
            ? throw  ew
            : b.pow(x.add(1)).mul(a.div(b).add(x).factorial()).div(a.div(b).sub(1).factorial())
}

log10 -> tetrate, minimum so that result is never more than input
x.log10().tetrate(1.840232)

kua effect:
player.value.points.max(0).add(1).log10().pow(0.6).div(200).mul(player.value.kua.amount.max(0).mul(100000).add(1).pow(0.667)).add(1).log10().add(1)

pr2 scaling: 2 -> 1.5

function doAllScaling(x, scalList, inv, customScaling = []) {
    let sta, pow, sType, base, index
    x = D(x);
    for (let i = 0; i < scalList.length; i++) {
        index = inv ? i : scalList.length - i - 1;
        sta = scalList[index].start;
        pow = scalList[index].strength;
        sType = scalList[index].type;
        base = scalList[index].base;
        
        x = scale(x, sType, inv, sta, pow, base);
    }
    return x;
}

You have {x} Kuaraniai Shards, which produce {y} Kuaraniai Power (KPower) per second.